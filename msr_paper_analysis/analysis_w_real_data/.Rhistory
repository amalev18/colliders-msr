library(brms)
no_collider <- brm(LOC ~ DevExp, family = gaussian,
data = dlist_sim_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)))#,
no_collider <- brm(LOC ~ DevExp, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)))#,
# Results ----------------------------------------------------------------------
# Aiming to find beta_DevExp ~ 0.95 for no_collider
precis(no_collider)
fixef(no_collider)
collider <- brm(LOC ~ DevExp + Bugs, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)))
pp_check(no_collider, type = "bars", ndraws = 100)[1]
pp_check(no_collider, type = "dens_overlay", ndraws = 100)[1]
pp_check(no_collider, type = "dens_overlay", ndraws = 100)
pp_check(collider, type = "dens_overlay", ndraws = 100)
pp_check(no_collider, type = "scatter_avg", ndraws = 100)
pp_check(collider, type = "scatter_avg", ndraws = 100)
# Trace plots
mcmc_trace(as.mcmc(no_collider))
library(bayesplot)
# Trace plots
mcmc_trace(as.mcmc(no_collider))
mcmc_trace(as.mcmc(collider))
# Extract the posterior samples
posterior_samples <- posterior_samples(no_collider)
# Extract the posterior samples
draws <- as_draws_df(no_collider)
# Generate trace plots for the parameters of the model
mcmc_trace(draws)
collider <- brm(LOC ~ DevExp + Bugs, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)), sample_prior = "only")
# Diagnostics: Traceplots
#########################
# Extract the posterior samples
draws <- as_draws_df(no_collider)
# Diagnostics: Traceplots
#########################
# Extract the posterior samples
draws <- as_draws_df(collider)
mcmc_dens(draws, pars = c("b_Intercept", "b_x"))
draws
mcmc_dens(draws, pars = c("b_Intercept", "b_DevExp"))
# Prior checks
#########################
m0_no_collider <- brm(LOC ~ DevExp, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)), sample_prior = "only")
m0_collider <- brm(LOC ~ DevExp + Bugs, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b)), sample_prior = "only")
priors_no_collider <- as_draws_df(m0_no_collider)
priors_collider <- as_draws_df(m0_collider)
mcmc_dens(priors_no_collider, pars = c("b_Intercept", "b_DevExp"))
mcmc_dens(priors_collider, pars = c("b_Intercept", "b_DevExp", "b_bugs"))
priors_collider
mcmc_dens(priors_no_collider, pars = c("b_Intercept", "b_DevExp"))
priors_collider
mcmc_dens(priors_no_collider, pars = c("b_Intercept", "b_DevExp"))
mcmc_dens(priors_collider, pars = c("b_Intercept", "b_DevExp", "b_Bugs"))
collider <- ulam(
alist(
LOC ~ dnorm(mu, sigma),
mu <- alpha + beta_DevExp*DevExp + beta_Bugs*Bugs,
alpha ~ dnorm(70, 5),
beta_DevExp ~ dnorm(0, 0.5),
beta_Bugs ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = dat, chains = 4, cores = 4
)
prior_no_collider <- extract.prior(collider)
dens( prior_no_collider$alpha  , adj=0.1 )
dens( prior_no_collider$beta_DevExp, adj=0.1 )
dens( prior_no_collider$beta_Bugs, adj=0.1 )
collider <- brm(LOC ~ DevExp + Bugs, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sigma)))
no_collider <- brm(LOC ~ DevExp, family = gaussian,
data = dat, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(70, 5), class = Intercept),
prior(normal(0, 0.5), class = b),
prior(exponential(1), class = sigma)))
# Resulting Estimates
#########################
fixef(no_collider)
fixef(collider)
hist(dat$Bugs, xlab = "Number of Bugs")
# Number of samples
n <- 20000
def <- defData(varname = "DevExp", dist = "poisson", formula = 5)
def <- defData(def, varname = "LOC", dist = "normal", formula = "70 +
0.95*DevExp", variance = 15) #approx normal
def <- defData(def, varname = "Bugs", dist = "poisson", formula = "-5 + 0.08*LOC -
0.40*DevExp", link = "log")
dat = genData(n, def)
hist(dat$Bugs, xlab = "Number of Bugs")
max(dat$Bugs)
hist(dat$LOC, xlab = "LOC")
hist(dat$DevExp, xlab = "DevExp")
# Verification of simulated data
#########################
hist(dat$Bugs, xlab = "Number of Bugs")
max(dat$Bugs)
hist(dat$LOC, xlab = "LOC")
hist(dat$DevExp, xlab = "DevExp")
## Simulations
### Theoretical SE Scenario
knitr::opts_chunk$set(echo = TRUE)
library(brms)
library(rethinking)
library(bayesplot)
library(posterior)
## Simulations
### Theoretical SE Scenario
For the made up SE example, the variables of intereset were the following:
install.packages("rstan")
install.packages("rstan")
library(brms)
# Number of samples to generate
n <- 2000
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
library(simstudy)
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_sim_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- ulam(
alist(
TR ~ bernoulli(p),
logit(p) <- a + beta_SR*SR,
a ~ dnorm(-1, 1),
beta_SR ~ dnorm(0, 0.5)
), data = dlist_sim_standardized, chains = 4, cores = 4, iter = 10000
)
precis(tot_collider)
precis(tot_no_collider)
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_sim_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- ulam(
alist(
TR ~ bernoulli(p),
logit(p) <- a + beta_SR*SR,
a ~ dnorm(-1, 1),
beta_SR ~ dnorm(0, 0.5)
), data = dlist_sim_standardized, chains = 4, cores = 4, iter = 10000
)
precis(tot_no_collider)
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_sim_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- ulam(
alist(
TR ~ bernoulli(p),
logit(p) <- a + beta_SR*SR,
a ~ dnorm(-1, 1),
beta_SR ~ dnorm(0, 0.5)
), data = dlist_sim_standardized, chains = 4, cores = 4, iter = 10000
)
precis(tot_no_collider)
# Number of samples to generate
n <- 5000
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_sim_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- ulam(
alist(
TR ~ bernoulli(p),
logit(p) <- a + beta_SR*SR,
a ~ dnorm(-1, 1),
beta_SR ~ dnorm(0, 0.5)
), data = dlist_sim_standardized, chains = 4, cores = 4, iter = 10000
)
precis(tot_no_collider)
tot_no_collider_brm <- brm(TR ~ SR, family = bernoulli,
data = dlist_sim_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
tot_no_collider_brm <- brm(TR ~ SR, family = bernoulli,
data = dlist_sim_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
library(simstudy)
library(brms)
library(bayesplot)
library(posterior)
set.seed(42)
# Number of samples to generate
n <- 5000
# Generate data
#########################
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_tot_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- brm(TR ~ SR, family = bernoulli,
data = dlist_tot_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# With inclusion of collider
tot_collider <- brm(TR ~ SR + R_LOC + R_Locations,
family = bernoulli, data = dlist_tot_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# Resulting Estimates
#########################
summary(tot_no_collider)
summary(tot_collider)
loo_results <- loo(tot_no_collider)
loo_results
waic_results <- waic(tot_no_collider)
waic_results
loo_c_results <- loo(tot_collider)
loo_c_results
library(simstudy)
library(brms)
library(bayesplot)
library(posterior)
set.seed(1990)
# Number of samples to generate
n <- 5000
# Defining variables, and the relationships between them
# Approximated counts to normal when mean of the variable is > 100
def <- defData(varname = "RefAge", dist = "normal", formula = 114, variance = 20)
def <- defData(def, varname = "DevRefExp", dist = "normal", formula = 1543, variance = 40)
def <- defData(def, varname = "L_Locations", dist = "poisson", formula = 3.3, link = "log")
def <- defData(def, varname = "L_LOC", dist = "normal", formula = 640, variance = 40)
def <- defData(def, varname = "DevRefComExp", dist = "normal", formula = "85 +
0.6*log(DevRefExp)", variance = 20)
def <- defData(def, varname = "PrevRef", dist = "poisson", formula = "2 +
0.2*log(DevRefExp)", link = "log")
def <- defData(def, varname = "SR", dist = "binary", formula = "-1 + 0.1*log(RefAge) +
0.05*log(L_LOC) + 0.05*L_Locations + 0.15*log(PrevRef) +
0.1*log(DevRefComExp) + 0.05*log(DevRefExp)", link = "logit")
def <- defData(def, varname = "NmbRef", dist = "poisson", formula = "2.6 + 0.2*SR", link = "log")
def <- defData(def, varname = "NmbRefType_UQ", dist = "poisson", formula = "1.2 + 0.3*SR", link = "log")
def <- defData(def, varname = "NmbCodeElem_UQ", dist = "poisson", formula = "1.4 + 0.2*SR", link = "log")
def <- defData(def, varname = "NmbFiles", dist = "poisson", formula = "1.1 + 0.1*SR +
0.2*log(NmbRef)", link = "log")
def <- defData(def, varname = "AvgNmbFiles", dist = "normal", formula = "0.5 + 0.05*NmbRef", variance = 0.3)
def <- defData(def, varname = "TR", dist = "binary", formula = "-2.3 + 0.5*SR +
0.02*NmbRefType_UQ + 0.02*NmbCodeElem_UQ + 0.02*log(NmbRef) +
0.02*log(PrevRef) + 0.02*log(L_LOC) + 0.02*L_Locations", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 40)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "1 + 0.3*SR +
0.3*TR + 0.08*AvgNmbFiles + 0.1*NmbRef + 0.08*NmbRefType_UQ", link = "log")
dat <- genData(n, def)
# Checks of the generated data. The numbers inserted in above generations were verified by plotting histograms.
# It was made sure that the input values reflected the wanted behavior for the variable.
mu <- 620
sigma <- 40
lambda <- 30
hist(rnorm(n, mu, sigma))
hist(rpois(n, lambda))
# Standardize all features, not treatment and outcome
dlist_dir_standardized <- list(
TR = dat$TR,
RefAge = standardize(dat$RefAge),
DevRefExp = standardize(dat$DevRefExp),
L_Locations = standardize(dat$L_Locations),
L_LOC = standardize(dat$L_LOC),
DevRefComExp = standardize(dat$DevRefComExp),
PrevRef = standardize(dat$PrevRef),
SR = dat$SR,
NmbRef = standardize(dat$NmbRef),
NmbRefType_UQ = standardize(dat$NmbRefType_UQ),
NmbCodeElem_UQ = standardize(dat$NmbCodeElem_UQ),
NmbFiles = standardize(dat$NmbFiles),
AvgNmbFiles = standardize(dat$AvgNmbFiles),
R_Locations = standardize(dat$R_Locations),
R_LOC = standardize(dat$R_LOC)
)
# Without inclusion of collider
dir_no_collider <- brm(TR ~ SR + L_Locations + L_LOC + NmbFiles + NmbRef + NmbRefType_UQ + NmbCodeElem_UQ + AvgNmbFiles +
RefAge + DevRefExp + DevRefComExp + PrevRef, family = bernoulli,
data = dlist_dir_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# With inclusion of collider
dir_collider <- brm(TR ~ SR + L_Locations + L_LOC + NmbFiles + NmbRef + NmbRefType_UQ + NmbCodeElem_UQ + AvgNmbFiles +
RefAge + DevRefExp + DevRefComExp + PrevRef + R_LOC + R_Locations, family = bernoulli,
data = dlist_dir_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
loo_results <- loo(dir_no_collider)
loo_c_results <- loo(dir_collider)
loo_results
loo_c_results
i
# Results
#########################
summary(dir_no_collider)
summary(dir_collider)
loo_results
loo_c_results
loo_results <- loo(tot_no_collider)
loo_c_results
loo_c_results <- loo(tot_collider)
loo_results
loo_c_results
loo_results
loo_c_results
compare(tot_no_collider, tot_collider)
loo_nc <- loo(tot_no_collider)
loo_c <- loo(tot_collider)
compare(loo_nc, loo_c)
loo_compare(loo_nc, loo_c)
tot_no_collider <- add_criterion(tot_no_collider, criterion = "loo")
tot_collider <- add_criterion(tot_collider, criterion = "loo")
comparison <- loo_compare(tot_no_collider, tot_collider)
comparison
library(simstudy)
library(brms)
library(bayesplot)
library(posterior)
set.seed(1990)
# Number of samples to generate
n <- 5000
# Defining variables, and the relationships between them
# Approximated counts to normal when mean of the variable is > 100
def <- defData(varname = "RefAge", dist = "normal", formula = 114, variance = 20)
def <- defData(def, varname = "DevRefExp", dist = "normal", formula = 1543, variance = 40)
def <- defData(def, varname = "L_Locations", dist = "poisson", formula = 3.3, link = "log")
def <- defData(def, varname = "L_LOC", dist = "normal", formula = 640, variance = 40)
def <- defData(def, varname = "DevRefComExp", dist = "normal", formula = "85 +
0.6*log(DevRefExp)", variance = 20)
def <- defData(def, varname = "PrevRef", dist = "poisson", formula = "2 +
0.2*log(DevRefExp)", link = "log")
def <- defData(def, varname = "SR", dist = "binary", formula = "-1 + 0.1*log(RefAge) +
0.05*log(L_LOC) + 0.05*L_Locations + 0.15*log(PrevRef) +
0.1*log(DevRefComExp) + 0.05*log(DevRefExp)", link = "logit")
def <- defData(def, varname = "NmbRef", dist = "poisson", formula = "2.6 + 0.2*SR", link = "log")
def <- defData(def, varname = "NmbRefType_UQ", dist = "poisson", formula = "1.2 + 0.3*SR", link = "log")
def <- defData(def, varname = "NmbCodeElem_UQ", dist = "poisson", formula = "1.4 + 0.2*SR", link = "log")
def <- defData(def, varname = "NmbFiles", dist = "poisson", formula = "1.1 + 0.1*SR +
0.2*log(NmbRef)", link = "log")
def <- defData(def, varname = "AvgNmbFiles", dist = "normal", formula = "0.5 + 0.05*NmbRef", variance = 0.3)
def <- defData(def, varname = "TR", dist = "binary", formula = "-2.3 + 0.5*SR +
0.02*NmbRefType_UQ + 0.02*NmbCodeElem_UQ + 0.02*log(NmbRef) +
0.02*log(PrevRef) + 0.02*log(L_LOC) + 0.02*L_Locations", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 40)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "1 + 0.3*SR +
0.3*TR + 0.08*AvgNmbFiles + 0.1*NmbRef + 0.08*NmbRefType_UQ", link = "log")
dat <- genData(n, def)
# Checks of the generated data. The numbers inserted in above generations were verified by plotting histograms.
# It was made sure that the input values reflected the wanted behavior for the variable.
mu <- 620
sigma <- 40
lambda <- 30
hist(rnorm(n, mu, sigma))
hist(rpois(n, lambda))
# Standardize all features, not treatment and outcome
dlist_dir_standardized <- list(
TR = dat$TR,
RefAge = standardize(dat$RefAge),
DevRefExp = standardize(dat$DevRefExp),
L_Locations = standardize(dat$L_Locations),
L_LOC = standardize(dat$L_LOC),
DevRefComExp = standardize(dat$DevRefComExp),
PrevRef = standardize(dat$PrevRef),
SR = dat$SR,
NmbRef = standardize(dat$NmbRef),
NmbRefType_UQ = standardize(dat$NmbRefType_UQ),
NmbCodeElem_UQ = standardize(dat$NmbCodeElem_UQ),
NmbFiles = standardize(dat$NmbFiles),
AvgNmbFiles = standardize(dat$AvgNmbFiles),
R_Locations = standardize(dat$R_Locations),
R_LOC = standardize(dat$R_LOC)
)
# Without inclusion of collider
dir_no_collider <- brm(TR ~ SR + L_Locations + L_LOC + NmbFiles + NmbRef + NmbRefType_UQ + NmbCodeElem_UQ + AvgNmbFiles +
RefAge + DevRefExp + DevRefComExp + PrevRef, family = bernoulli,
data = dlist_dir_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# With inclusion of collider
dir_collider <- brm(TR ~ SR + L_Locations + L_LOC + NmbFiles + NmbRef + NmbRefType_UQ + NmbCodeElem_UQ + AvgNmbFiles +
RefAge + DevRefExp + DevRefComExp + PrevRef + R_LOC + R_Locations, family = bernoulli,
data = dlist_dir_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# Compare models using loo_compare
dir_no_collider <- add_criterion(dir_no_collider, criterion = "loo")
dir_collider <- add_criterion(dir_collider, criterion = "loo")
comparison <- loo_compare(dir_no_collider, dir_collider)
comparison
# Number of samples to generate
n <- 5000
# Generate data
#########################
def <- defData(varname = "SR", dist = "binary", formula = 0.85)
def <- defData(def, varname = "TR", dist = "binary", formula = "-1.8 + SR*0.8", link = "logit")
def <- defData(def, varname = "R_LOC", dist = "normal", formula = "620 + 2*SR + 2*TR", variance = 100)
def <- defData(def, varname = "R_Locations", dist = "poisson", formula = "2.5 + 0.8*TR + 0.8*SR", link = "log")
dat = genData(n, def)
dlist_tot_standardized <- list(
SR = dat$SR,
TR = dat$TR,
R_LOC = standardize(dat$R_LOC),
R_Locations = standardize(dat$R_Locations)
)
# Without inclusion of collider
tot_no_collider <- brm(TR ~ SR, family = bernoulli,
data = dlist_tot_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# With inclusion of collider
tot_collider <- brm(TR ~ SR + R_LOC + R_Locations,
family = bernoulli, data = dlist_tot_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.5), class = b)))
# Compare models using loo_compare
tot_no_collider <- add_criterion(tot_no_collider, criterion = "loo")
tot_collider <- add_criterion(tot_collider, criterion = "loo")
comparison <- loo_compare(tot_no_collider, tot_collider)
comparison
library(simstudy)
library(brms)
library(bayesplot)
library(posterior)
library(dplyr)
library(gridExtra)
library(ggplot2)
# Loading Data
#########################
script_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(script_dir)
dataset <- read.csv('data/commit_level_features_w_test_transformed_small.csv')
dataset
# Number of samples
n <- 8000
# Retrieve the number of samples wanted from the empirical data
sampled_data <- dataset %>%
sample_n(n, replace = FALSE)
dlist_emp_standardized <- list(
TR = sampled_data$TR,
SR = sampled_data$SR,
R_LOC = scale(sampled_data$rightLocationDiff),
R_Locations = scale(sampled_data$rightLocationCount)
)
# Without inclusion of collider
emp_no_collider <- brm(TR ~ SR, family = bernoulli,
data = dlist_emp_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.05), class = b)))
# With inclusion of collider
emp_collider <- brm(TR ~ SR + R_LOC + R_Locations,
family = bernoulli, data = dlist_emp_standardized, cores = 4, chains = 4, iter = 10000,
prior = c(prior(normal(-1, 1), class = Intercept),
prior(normal(0, 0.05), class = b)))
pp_check_no_collider <- pp_check(emp_no_collider, type = "bars", ndraws = 100) +
ggtitle("No Collider Model")
pp_check_collider <- pp_check(emp_collider, type = "bars", ndraws = 100) +
ggtitle("Collider Model")
pp_check_collider
pp_check_no_collider
